Subset Sum Problem - Explanation with Memoization and Tabulation
=================================================================

Problem:
--------
Given an array of non-negative integers and a target sum,
determine whether there exists a subset of the array whose elements sum up to the given target.

Example:
--------
Input: arr = [3, 34, 4, 12, 5, 2], sum = 9
Output: true
Explanation: Subset [4, 5] or [3, 4, 2] has sum = 9

=================================================================================
Approach 1: Memoization (Top-Down Dynamic Programming)
-------------------------------------------------------

Function: isSubset(index, target)

1. Base Cases:
   - If target == 0 -> return true (empty subset)
   - If index == 0 -> return arr[0] == target

2. Recursive Steps:
   - Not Take: call isSubset(index - 1, target)
   - Take: if target >= arr[index], call isSubset(index - 1, target - arr[index])

3. Use a 2D dp array: dp[n][sum+1] to memoize results.

Time Complexity: O(N * sum)
Space Complexity: O(N * sum) + O(N) recursion stack

=================================================================================
Approach 2: Tabulation (Bottom-Up Dynamic Programming)
-------------------------------------------------------

Code Structure (as provided in the C++ solution):

bool isSubsetSum(vector<int>& arr, int sum) {
    int n = arr.size();
    vector<vector<bool>> dp(n, vector<bool>(sum+1, false));

    // Base case: sum = 0 is always possible
    for (int i = 0; i < n; i++) {
        dp[i][0] = true;
    }

    // First element
    if (arr[0] <= sum)
        dp[0][arr[0]] = true;

    // Fill the table
    for (int i = 1; i < n; i++) {
        for (int j = 1; j <= sum; j++) {
            bool nt = dp[i - 1][j]; // not take
            bool t = false;
            if (j >= arr[i])
                t = dp[i - 1][j - arr[i]]; // take

            dp[i][j] = nt || t;
        }
    }

    return dp[n - 1][sum];
}

Time Complexity: O(N * sum)
Space Complexity: O(N * sum)

Note:
-----
- This can be optimized to O(sum) space using a 1D array, processing in reverse (j â†’ 0).
